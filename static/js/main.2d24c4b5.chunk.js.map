{"version":3,"sources":["components/TableRow/index.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","key","id","className","scope","name","email","phone","App","state","employees","search","currentList","handleInputChange","event","setState","target","value","console","log","this","Axios","get","then","res","data","compareBy","bind","sortBy","a","b","sort","filteredEmployees","filter","employee","toLowerCase","indexOf","type","placeholder","onChange","onClick","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0QAaeA,MAZf,SAAkBC,GACjB,OACC,wBAAIC,IAAKD,EAAME,IACd,wBAAIC,UAAU,YAAYC,MAAM,OAC9BJ,EAAME,IAER,wBAAIC,UAAU,QAAQH,EAAMK,MAC5B,wBAAIF,UAAU,SAASH,EAAMM,OAC7B,wBAAIH,UAAU,SAASH,EAAMO,S,iBC6FjBC,E,4MAhGdC,MAAQ,CACPC,UAAW,GACXC,OAAQ,GACRC,YAAa,I,EAgCdC,kBAAoB,SAACC,GACpB,EAAKC,SAAS,CAAEJ,OAAQG,EAAME,OAAOC,S,kEA9BjB,IAAD,OACnBC,QAAQC,IAAIC,KAAKX,MAAMC,WAEvBW,IAAMC,IAAI,8CAA8CC,MAAK,SAACC,GAC7D,IAAMd,EAAYc,EAAIC,KACtBP,QAAQC,IAAIT,GACZ,EAAKK,SAAS,CAAEL,UAAWA,EAAWE,YAAaF,IACnDQ,QAAQC,IAAI,EAAKV,UAGlBW,KAAKM,UAAUC,KAAKP,MACpBA,KAAKQ,OAAOD,KAAKP,Q,gCAGRnB,GACT,OAAO,SAAU4B,EAAGC,GACnB,OAAID,EAAE5B,GAAO6B,EAAE7B,IAAc,EACzB4B,EAAE5B,GAAO6B,EAAE7B,GAAa,EACrB,K,6BAIFA,GACN,IAAIW,EAAW,YAAOQ,KAAKX,MAAMC,WACjCE,EAAYmB,KAAKX,KAAKM,UAAUzB,IAChCmB,KAAKL,SAAS,CAAEL,UAAWE,M,+BAQlB,IAAD,OACJoB,EAAoBZ,KAAKX,MAAMC,UAAUuB,QAAO,SAACC,GACpD,OAAmE,IAA5DA,EAAS7B,KAAK8B,cAAcC,QAAQ,EAAK3B,MAAME,WAEvD,OACC,yBAAKR,UAAU,OACd,0BAAMA,UAAU,UACf,yBAAKA,UAAU,eACd,yBAAKA,UAAU,UAAf,qBAEC,6BACC,uBAAGA,UAAU,WAAb,+BACA,2BACCA,UAAU,sCACVkC,KAAK,OACLhC,KAAK,SACLiC,YAAY,SACZrB,MAAOG,KAAKX,MAAME,OAClB4B,SAAUnB,KAAKP,kBAAkBc,KAAKP,YAM3C,2BAAOjB,UAAU,SAChB,+BACC,4BACC,wBAAIqC,QAAS,kBAAM,EAAKZ,OAAO,OAAOxB,MAAM,OAA5C,MAGA,wBAAIoC,QAAS,kBAAM,EAAKZ,OAAO,SAASxB,MAAM,OAA9C,QAGA,wBAAIoC,QAAS,kBAAM,EAAKZ,OAAO,UAAUxB,MAAM,OAA/C,SAGA,wBAAIoC,QAAS,kBAAM,EAAKZ,OAAO,UAAUxB,MAAM,OAA/C,WAKF,+BACE4B,EAAkBS,KAAI,SAACP,GAAD,OACtB,kBAAC,EAAD,CACChC,GAAIgC,EAAShC,GACbG,KAAM6B,EAAS7B,KACfC,MAAO4B,EAAS5B,MAChBC,MAAO2B,EAAS3B,kB,GAvFNmC,aCOEC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCbHC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SD0HpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBhC,MAAK,SAACiC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.2d24c4b5.chunk.js","sourcesContent":["import React from 'react';\nfunction TableRow(props) {\n\treturn (\n\t\t<tr key={props.id}>\n\t\t\t<th className='tblHeader' scope='row'>\n\t\t\t\t{props.id}\n\t\t\t</th>\n\t\t\t<td className='name'>{props.name}</td>\n\t\t\t<td className='email'>{props.email}</td>\n\t\t\t<td className='phone'>{props.phone}</td>\n\t\t</tr>\n\t);\n}\nexport default TableRow;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TableRow from './components/TableRow';\nimport Axios from 'axios';\n\nclass App extends Component {\n\tstate = {\n\t\temployees: [],\n\t\tsearch: '',\n\t\tcurrentList: '',\n\t};\n\t// fetch employee list method also used for API request\n\tcomponentDidMount() {\n\t\tconsole.log(this.state.employees);\n\n\t\tAxios.get('https://jsonplaceholder.typicode.com/users').then((res) => {\n\t\t\tconst employees = res.data;\n\t\t\tconsole.log(employees);\n\t\t\tthis.setState({ employees: employees, currentList: employees });\n\t\t\tconsole.log(this.state);\n\t\t});\n\n\t\tthis.compareBy.bind(this);\n\t\tthis.sortBy.bind(this);\n\t}\n\t// sort functions\n\tcompareBy(key) {\n\t\treturn function (a, b) {\n\t\t\tif (a[key] < b[key]) return -1;\n\t\t\tif (a[key] > b[key]) return 1;\n\t\t\treturn 0;\n\t\t};\n\t}\n\n\tsortBy(key) {\n\t\tlet currentList = [...this.state.employees];\n\t\tcurrentList.sort(this.compareBy(key));\n\t\tthis.setState({ employees: currentList });\n\t}\n\n\t// Grabbing input value and updating state\n\thandleInputChange = (event) => {\n\t\tthis.setState({ search: event.target.value });\n\t};\n\t// render results of search value; second return renders page\n\trender() {\n\t\tlet filteredEmployees = this.state.employees.filter((employee) => {\n\t\t\treturn employee.name.toLowerCase().indexOf(this.state.search) !== -1;\n\t\t});\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<form className='search'>\n\t\t\t\t\t<div className='form-group '>\n\t\t\t\t\t\t<div className='header'>\n\t\t\t\t\t\t\tEmployee Directory\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className='subhead'>Search for employee by name</p>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='form-control justify-content-center'\n\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\tname='search'\n\t\t\t\t\t\t\t\t\tplaceholder='Search'\n\t\t\t\t\t\t\t\t\tvalue={this.state.search}\n\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<table className='table'>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th onClick={() => this.sortBy('id')} scope='col'>\n\t\t\t\t\t\t\t\tID\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th onClick={() => this.sortBy('name')} scope='col'>\n\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th onClick={() => this.sortBy('email')} scope='col'>\n\t\t\t\t\t\t\t\tEmail\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th onClick={() => this.sortBy('phone')} scope='col'>\n\t\t\t\t\t\t\t\tPhone\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{filteredEmployees.map((employee) => (\n\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\tid={employee.id}\n\t\t\t\t\t\t\t\tname={employee.name}\n\t\t\t\t\t\t\t\temail={employee.email}\n\t\t\t\t\t\t\t\tphone={employee.phone}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}